name: Backend CI - Test, Build, Scan and Push Images to ACR

on:
  push:
    branches:
      - testing
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # ---------------------------
  # Stage 1: Run Units Tests
  # ---------------------------
  test_and_lint_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q


      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

   
   

  # ---------------------------
  # Stage 2: SonarQube Code Analysis
  # ---------------------------
  sonarqube_analysis:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
    steps:
      - uses: actions/checkout@v4
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.projectKey=shwetakap_10.2HD
            -Dsonar.organization=shwetakap
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  # ---------------------------
  # Stage 3: Snyk Vulnerability Scan
  # ---------------------------
  # ---------------------------


  snyk_scan:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Snyk CLI
        uses: snyk/actions/setup@master
        with:
          snyk-version: 'latest'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Install dependencies
        run: |
          cd backend/product_service
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Snyk test
        run: |
          cd backend/product_service
          snyk test --json  --skip-unresolved > ../../product_service_snyk.json
          cd backend/order_service
          snyk test --json  --skip-unresolved > ../../order_service_snyk.json
          cd backend/customer_service
          snyk test --json  --skip-unresolved > ../../customer_service_snyk.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Snyk Reports
        uses: actions/upload-artifact@v4
        with:
          name: snyk-reports
          path: |
            product_service_snyk.json
            order_service_snyk.json
            customer_service_snyk.json

  # ---------------------------
  # Stage 4: Build and Push Docker Images + SBOM
  # --------------------------
  build_and_push_images:
   runs-on: ubuntu-latest
   needs: [sonarqube_analysis, snyk_scan]
   outputs:
     IMAGE_TAG: ${{ steps.set_image_tag.outputs.IMAGE_TAG }}
   steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

    - name: Install Syft and Grype
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

    # --- Product Service ---
    - name: Build and Push Product Service Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ./backend/product_service/
        docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}

    - name: SBOM & Vulnerability Scan - Product Service
      run: |
        syft ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} -o json > product_service_sbom.json
        grype ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} -o json > product_service_vuln.json || true


    # --- Order Service ---
    - name: Build and Push Order Service Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} ./backend/order_service/
        docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}

    - name: SBOM & Vulnerability Scan - Order Service
      run: |
        syft ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} -o json > order_service_sbom.json
        grype ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} -o json > product_service_vuln.json || true


    # --- Customer Service ---
    - name: Build and Push Customer Service Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }} ./backend/customer_service/
        docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }}

    - name: SBOM & Vulnerability Scan - Customer Service
      run: |
        syft ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }} -o json > customer_service_sbom.json
        grype ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }} > customer_service_vuln.json || true

    - name: Set IMAGE_TAG output
      id: set_image_tag
      run: echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

    - name: Logout from Azure
      if: always()
      run: az logout
