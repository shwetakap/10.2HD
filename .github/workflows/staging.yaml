name: Staging Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  TF_WORKING_DIR: ./infra
  RESOURCE_GROUP: sk-hd
  AKS_NAME: skhd-aks
  LOCATION: australiaeast
  ACR_NAME: skhdaks
  IMAGE_TAG: ${{ github.sha }}

jobs:
  terraform_apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.4

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Import Existing Resources and Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_resource_group: ${{ env.RESOURCE_GROUP }}
          TF_VAR_aks_name: ${{ env.AKS_NAME }}
          TF_VAR_acr_name: ${{ env.ACR_NAME }}
          TF_VAR_location: ${{ env.LOCATION }}
        run: |
          terraform import azurerm_resource_group.rg \
            /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }} || true
          terraform import azurerm_container_registry.acr \
            /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ContainerRegistry/registries/${{ env.ACR_NAME }} || true
          terraform import azurerm_kubernetes_cluster.aks \
            /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ContainerService/managedClusters/${{ env.AKS_NAME }} || true
          terraform apply -auto-approve

  deploy_services:
    name: Deploy Backend Services to AKS
    runs-on: ubuntu-latest
    needs: terraform_apply
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_NAME }}

      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build and Push Docker Images
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/product-service:${{ env.IMAGE_TAG }} ./product-service
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/order-service:${{ env.IMAGE_TAG }} ./order-service
          docker push ${{ env.ACR_NAME }}.azurecr.io/product-service:${{ env.IMAGE_TAG }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/order-service:${{ env.IMAGE_TAG }}

      - name: Deploy backend infrastructure
        run: |
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml

      - name: Deploy backend microservices
        run: |
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml

      - name: Wait for Services to be Ready
        run: |
          for svc in product-service order-service; do
            kubectl rollout status deployment/$svc -n default
            kubectl get pods -l app=$svc -n default
          done

  terraform_destroy:
    name: Destroy Staging Resources
    runs-on: ubuntu-latest
    needs: deploy_services
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.4

      - name: Terraform Destroy
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_resource_group: ${{ env.RESOURCE_GROUP }}
          TF_VAR_aks_name: ${{ env.AKS_NAME }}
          TF_VAR_location: $
        run: terraform destroy -auto-approve  
