name: Staging Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  TF_WORKING_DIR: ./infra
  RESOURCE_GROUP: sk-hd
  AKS_NAME: skhd-aks
  LOCATION: australiaeast
  ACR_NAME: skhdaks
  IMAGE_TAG: ${{ github.sha }}

jobs:
  docker_build_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure Container Registry
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Build & Push Product Service
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/product-service:${{ env.IMAGE_TAG }} ./backend/product-service
          docker push ${{ env.ACR_NAME }}.azurecr.io/product-service:${{ env.IMAGE_TAG }}

      - name: Docker Build & Push Order Service
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/order-service:${{ env.IMAGE_TAG }} ./backend/order-service
          docker push ${{ env.ACR_NAME }}.azurecr.io/order-service:${{ env.IMAGE_TAG }}

  terraform_apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: docker_build_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.4

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Import Existing Resources and Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_resource_group: ${{ env.RESOURCE_GROUP }}
          TF_VAR_aks_name: ${{ env.AKS_NAME }}
          TF_VAR_acr_name: ${{ env.ACR_NAME }}
          TF_VAR_location: ${{ env.LOCATION }}
        run: |
          terraform import azurerm_resource_group.rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }} || true
          terraform import azurerm_container_registry.acr /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ContainerRegistry/registries/${{ env.ACR_NAME }} || true
          terraform import azurerm_kubernetes_cluster.aks /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ContainerService/managedClusters/${{ env.AKS_NAME }} || true
          terraform apply -auto-approve

  deploy_services:
    name: Deploy Backend Services to AKS
    runs-on: ubuntu-latest
    needs: terraform_apply
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_NAME }}

      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Deploy backend infrastructure
        run: |
          cd k8s
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      - name: Deploy backend microservices
        run: |
          cd k8s
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Wait for LoadBalancer IPs
        run: |
          PRODUCT_IP=""
          ORDER_IP=""
          for i in $(seq 1 60); do
            PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get service order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: LoadBalancer IPs not assigned"
            exit 1
          fi
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      - name: Set outputs
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Set outputs
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

  terraform_destroy:
    name: Destroy Staging Resources
    runs-on: ubuntu-latest
    needs: deploy_services
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.4

      - name: Terraform Destroy
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_resource_group: ${{ env.RESOURCE_GROUP }}
          TF_VAR_aks_name: ${{ env.AKS_NAME }}
          TF_VAR_location: ${{ env.LOCATION }}
        run: terraform destroy -auto-approve
