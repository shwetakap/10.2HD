name: Prod Deployment - Backend to AKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  RESOURCE_GROUP: sk-hd
  AKS_NAME: skhd-aks
  ACR_NAME: skhdaks
  IMAGE_TAG: ${{ github.sha }}
  AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
  AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}

jobs:
  # ---------------------------
  # Stage 1: Manual Approval
  # ---------------------------
  approval:
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.manual_approval.outputs.approved }}
    steps:
      - name: Manual Approval
        id: manual_approval
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # ---------------------------
  # Stage 2: Deploy to Production AKS
  # ---------------------------
  deploy_prod:
    runs-on: ubuntu-latest
    needs: approval
    if: needs.approval.outputs.approved == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} \
                                  --name ${{ env.AKS_NAME }} \
                                  --overwrite-existing

      - name: Deploy Kubernetes secrets
        run: |
          kubectl create secret generic ecomm-secrets \
            --from-literal=AZURE_STORAGE_ACCOUNT_NAME=${{ env.AZURE_STORAGE_ACCOUNT_NAME }} \
            --from-literal=AZURE_STORAGE_ACCOUNT_KEY=${{ env.AZURE_STORAGE_ACCOUNT_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy backend services
        run: |
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Update container images
        run: |
          kubectl set image deployment/product-service \
            product-service-container=${{ env.ACR_NAME }}.azurecr.io/product-service:${{ env.IMAGE_TAG }}
          kubectl set image deployment/order-service \
            order-service-container=${{ env.ACR_NAME }}.azurecr.io/order-service:${{ env.IMAGE_TAG }}

      - name: Wait for deployments & EXTERNAL-IP
        run: |
          echo "⏳ Waiting for rollout..."
          kubectl rollout status deployment/product-service --timeout=300s
          kubectl rollout status deployment/order-service --timeout=300s

          PRODUCT_IP=$(kubectl get svc product-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          ORDER_IP=$(kubectl get svc order-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          until [ -n "$PRODUCT_IP" ] && [ -n "$ORDER_IP" ]; do
            echo "⏳ Waiting for EXTERNAL-IP..."
            sleep 5
            PRODUCT_IP=$(kubectl get svc product-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get svc order-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          done

          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      - name: Health checks
        run: |
          echo "✅ Checking product-service..."
          if ! curl --max-time 10 http://$PRODUCT_IP:8080/health | grep '"status":"ok"'; then
            echo "❌ Product service unhealthy!"
            exit 1
          fi

          echo "✅ Checking order-service..."
          if ! curl --max-time 10 http://$ORDER_IP:8081/health | grep '"status":"ok"'; then
            echo "❌ Order service unhealthy!"
            exit 1
          fi

      - name: Run Postman Integration Tests
        run: |
          npm install -g newman
          newman run postman/TestMicroService.postman_collection.json \
            --env-var "order_ip=${ORDER_IP}" \
            --env-var "order_port=8081" \
            --env-var "product_ip=${PRODUCT_IP}" \
            --env-var "product_port=8080" \
            --reporters cli